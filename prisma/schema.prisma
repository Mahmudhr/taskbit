generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  name            String
  email           String    @unique
  password        String
  phone           String?
  whatsapp        String?
  bkashNumber     String?   @map("bkash_number")
  nagadNumber     String?   @map("nagad_number")
  bankAccountNumber String? @map("bank_account_number")
  branchName      String?   @map("branch_name")
  bankName        String?   @map("bank_name")
  swiftCode       String?   @map("swift_code")
  salary          Float?    // Added salary field
  role            Role      @default(USER)
  status          UserStatus @default(ACTIVE)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // Many-to-many relationship with tasks through TaskAssignment
  taskAssignments TaskAssignment[] @relation("UserTaskAssignments")
  
  createdTasks    Task[]    @relation("CreatedTasks")
  payments        Payment[] @relation("UserPayments")
  salaries        Salary[]  @relation("UserSalaries")
  isDeleted       Boolean   @default(false) @map("is_deleted")

  @@map("users")
}

model Client {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  email     String?      @unique
  phone     String?
  company   String?
  status    ClientStatus @default(ACTIVE)
  isDeleted Boolean      @default(false) @map("is_deleted")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  tasks     Task[]       @relation("ClientTasks")

  @@map("clients")
}

model Task {
  id              Int       @id @default(autoincrement())
  title           String
  description     String?
  note            String?
  link            String?
  amount          Float
  status          TaskStatus @default(PENDING)
  paper_type      PaperType @default(CONFERENCE)
  isDeleted       Boolean   @default(false) @map("is_deleted")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  duration        DateTime?
  startDate       DateTime? @map("start_date")
  targetDate      DateTime? @map("target_date")
  
  // Many-to-many relationship with users through TaskAssignment
  taskAssignments TaskAssignment[] @relation("TaskAssignments")
  
  payments        Payment[] @relation("TaskPayments")
  createdBy       User?     @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById     Int?      @map("created_by_id")
  client          Client?   @relation("ClientTasks", fields: [clientId], references: [id])
  clientId        Int?      @map("client_id")
  receivableAmounts ReceivableAmount[] @relation("TaskReceivableAmounts")

  @@map("tasks")
}

// Junction table for many-to-many relationship between Task and User
model TaskAssignment {
  id          Int      @id @default(autoincrement())
  taskId      Int      @map("task_id")
  userId      Int      @map("user_id")
  assignedAt  DateTime @default(now()) @map("assigned_at")
  status      TaskAssignmentStatus @default(ACTIVE)
  
  // Relations
  task        Task     @relation("TaskAssignments", fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation("UserTaskAssignments", fields: [userId], references: [id], onDelete: Cascade)
  
  // Composite unique constraint to prevent duplicate assignments
  @@unique([taskId, userId])
  @@map("task_assignments")
}

model Payment {
  id              Int          @id @default(autoincrement())
  referenceNumber String       @map("reference_number")
  paymentType     PaymentType  @map("payment_type")
  amount          Float
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime     @default(now()) @map("created_at")
  task            Task         @relation("TaskPayments", fields: [taskId], references: [id])
  taskId          Int          @map("task_id")
  user            User         @relation("UserPayments", fields: [userId], references: [id])
  userId          Int          @map("user_id")

  @@map("payments")
}

model Salary {
  id              Int           @id @default(autoincrement())
  amount          Float
  month           Int           // 1-12 representing months
  year            Int
  status          SalaryStatus  @default(PENDING)
  salaryType      SalaryType    @map("salary_type")
  referenceNumber String?       @map("reference_number")
  note            String?
  paymentType     PaymentType   @map("payment_type")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  user            User          @relation("UserSalaries", fields: [userId], references: [id])
  userId          Int           @map("user_id")

  @@map("salaries")
}

model Expense {
  id        Int      @id @default(autoincrement())
  title     String
  amount    Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("expenses")
}

model ReceivableAmount {
  id        Int          @id @default(autoincrement())
  amount    Float
  status    PaymentStatus?
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  // Relation to Task
  task      Task?         @relation("TaskReceivableAmounts", fields: [taskId], references: [id])
  taskId    Int?          @map("task_id")

  @@map("receivable_amounts")
}

enum Role {
  ADMIN
  USER
  EMPLOYEE
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  SUBMITTED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentType {
  BKASH
  NAGAD
  BANK_TRANSFER
}

enum SalaryStatus {
  PENDING
  PAID
  CANCELLED
}

enum SalaryType {
  MONTHLY
  BONUS
  OVERTIME
}

enum PaperType {
  CONFERENCE
  SURVEY
  JOURNAL
  Journal_Q1
  THESIS
  Bicent_RESEARCH
}

enum ClientStatus {
  ACTIVE
  INACTIVE
}

// New enum for task assignment status
enum TaskAssignmentStatus {
  ACTIVE
  REMOVED
}